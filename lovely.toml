[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif card_type == 'Default' or card_type == 'Enhanced' then'''
position = 'after'
payload = '''if self.ability and self.ability.trading and ((self.ability.trading.name == "Blueprint") or (self.ability.trading.name == "Brainstorm")) then
    self.ability.doj_blueprint_compat_ui = self.ability.doj_blueprint_compat_ui or 'compat'
    self.ability.doj_blueprint_compat_check = nil
    main_end = (self.area and ((self.area == G.play) or (self.area == G.hand))) and {
        {n=G.UIT.C, config={align = "bm", minh = 0.4}, nodes={
            {n=G.UIT.C, config={ref_table = self, align = "m", colour = G.C.JOKER_GREY, r = 0.05, padding = 0.06, func = 'doj_blueprint_compat'}, nodes={
                {n=G.UIT.T, config={ref_table = self.ability, ref_value = 'doj_blueprint_compat_ui',colour = G.C.UI.TEXT_LIGHT, scale = 0.32*0.8}},
            }}
        }}
    } or nil
end
if self.ability and self.ability.trading and (self.ability.trading.name == "Luchador") and (self.area == G.hand) then
    local disableable = G.GAME.blind and ((not G.GAME.blind.disabled) and (G.GAME.blind:get_type() == 'Boss'))
    main_end = {
        {n=G.UIT.C, config={align = "bm", minh = 0.4}, nodes={
            {n=G.UIT.C, config={ref_table = self, align = "m", colour = disableable and G.C.GREEN or G.C.RED, r = 0.05, padding = 0.06}, nodes={
                {n=G.UIT.T, config={text = ' '..localize(disableable and 'k_active' or 'ph_no_boss_active')..' ',colour = G.C.UI.TEXT_LIGHT, scale = 0.32*0.9}},
            }}
        }}
    }
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.ability.name == 'Blueprint' or self.ability.name == 'Brainstorm' then'''
position = 'before'
payload = '''if self.ability and self.ability.trading and ((self.ability.trading.name == "Blueprint") or (self.ability.trading.name == "Brainstorm")) and ((self.area == G.play) or (self.area == G.hand)) then
    local other_joker = nil
    for i = 1, #self.area.cards do
        if self.area.cards[i] == self then other_joker = self.area.cards[i+1] end
    end
    if (self.ability.trading.name == "Brainstorm") then
        other_joker = self.area.cards[1]
    end
    if other_joker and other_joker ~= self and other_joker.ability and other_joker.ability.trading and not other_joker.ability.trading.blueprint_incompat and other_joker.ability.trading.is_joker then
        self.ability.doj_blueprint_compat = 'compatible'
    else
        self.ability.doj_blueprint_compat = 'incompatible'
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.children.use_button then self.children.use_button:remove(); self.children.use_button = nil end'''
position = 'after'
payload = '''if self.children.doj_sell_button then self.children.doj_sell_button:remove(); self.children.doj_sell_button = nil end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''self.highlighted = is_higlighted'''
position = 'after'
payload = '''if self.playing_card then
    if self.highlighted and self.ability and self.ability.trading and self.ability.trading.sellable and (self.area == G.hand) then
        self.children.doj_sell_button = UIBox{
            definition = G.UIDEF.doj_sell_buttons(self), 
            config = {align=
                    ((self.area == G.jokers) or (self.area == G.consumeables)) and "cr" or
                    "bmi"
                , offset = 
                    ((self.area == G.jokers) or (self.area == G.consumeables)) and {x= - 0.4,y=-0.25*G.CARD_H} or
                    {x=0,y=0.65},
                parent =self}
        }
    elseif self.children.doj_sell_button then
        self.children.doj_sell_button:remove()
        self.children.doj_sell_button = nil
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.ability.name == "Joker Stencil" then'''
position = 'before'
payload = '''if self.ability and self.ability.trading and (self.ability.trading.name == "Joker Stencil") then
    self.ability.trading.config.x_mult = (G.jokers.config.card_limit - #G.jokers.cards)
    for i = 1, #G.jokers.cards do
        if G.jokers.cards[i].ability.name == 'Joker Stencil' then self.ability.trading.config.x_mult = self.ability.trading.config.x_mult + 1 end
    end
end
if self.ability and self.ability.trading and (self.ability.trading.name == "Swashbuckler") then
    local sell_cost = 0
    for i = 1, #G.jokers.cards do
        if G.jokers.cards[i] ~= self and (G.jokers.cards[i].area and G.jokers.cards[i].area == G.jokers) then
            sell_cost = sell_cost + G.jokers.cards[i].sell_cost
        end
    end
    self.ability.trading.config.mult = sell_cost
end
if self.ability and self.ability.trading and (self.ability.trading.name == "Stone Joker") then
    self.ability.trading.config.stone_tally = 0
    for k, v in pairs(G.playing_cards) do
        if SMODS.has_enhancement(v, 'm_stone') then self.ability.trading.config.stone_tally = self.ability.trading.config.stone_tally + 1 end
    end
end
if self.ability and self.ability.trading and (self.ability.trading.name == "Throwback") then
    self.ability.trading.config.x_mult = 1 + G.GAME.skips * self.ability.trading.config.mod_x_mult
end
if self.ability and self.ability.trading and (self.ability.trading.name == "Driver's License") then
    self.ability.trading.config.tally = 0
    for k, v in pairs(G.playing_cards) do
        if next(SMODS.get_enhancements(v)) then self.ability.trading.config.tally = self.ability.trading.config.tally+1 end
    end
end
if self.ability and self.ability.trading and (self.ability.trading.name == "Steel Joker") then
    self.ability.trading.config.steel_tally = 0
    for k, v in pairs(G.playing_cards) do
        if SMODS.has_enhancement(v, 'm_steel') then self.ability.trading.config.steel_tally = self.ability.trading.config.steel_tally + 1 end
    end
end
if self.ability and self.ability.trading and (self.ability.trading.name == "Cloud 9") then
    self.ability.trading.config.nine_tally = 0
    for k, v in pairs(G.playing_cards) do
        if v:get_id() == 9 then self.ability.trading.config.nine_tally = self.ability.trading.config.nine_tally + 1 end
    end
end
if (self.area == G.hand) and self.ability and self.ability.trading and (self.ability.trading.config.doj_hand_size or self.ability.trading.config.doj_discards or self.ability.trading.config.doj_hands) then
    local curr_debuff = self.debuff
    local old_debuff = self.ability.trading.config.doj_debuffed
    if curr_debuff == nil then
        curr_debuff = false
    else
        curr_debuff = true
    end
    if curr_debuff ~= old_debuff then
        self.ability.trading.config.doj_debuffed = curr_debuff
        if self.ability.trading.config.doj_hand_size then
            if curr_debuff then
                G.hand.config.real_card_limit = (G.hand.config.real_card_limit or G.hand.config.card_limit) - self.ability.trading.config.doj_hand_size
                G.hand.config.card_limit = math.max(0, G.hand.config.real_card_limit)
            else
                G.hand.config.real_card_limit = (G.hand.config.real_card_limit or G.hand.config.card_limit) + self.ability.trading.config.doj_hand_size
                G.hand.config.card_limit = math.max(0, G.hand.config.real_card_limit)
            end
        end
        if self.ability.trading.config.doj_discards then
            if curr_debuff then
                ease_discard(-self.ability.trading.config.doj_discards)
            else
                ease_discard(self.ability.trading.config.doj_discards)
            end
        end
        if self.ability.trading.config.doj_hands then
            if curr_debuff then
                ease_hands_played(-self.ability.trading.config.doj_hands)
            else
                ease_hands_played(self.ability.trading.config.doj_hands)
            end
        end
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''if self.cards[i] == card then'''
position = 'after'
payload = '''   if card.ability and card.ability.trading and card.ability.trading.config.doj_hand_size and (self == G.hand) then
        self.config.real_card_limit = (self.config.real_card_limit or self.config.card_limit) - card.ability.trading.config.doj_hand_size
        self.config.card_limit = math.max(0, self.config.real_card_limit)
    end
    if card.ability and card.ability.trading and card.ability.trading.config.doj_discards and (self == G.hand) then
        ease_discard(-card.ability.trading.config.doj_discards)
    end
    if card.ability and card.ability.trading and card.ability.trading.config.doj_hands and (self == G.hand) then
        ease_hands_played(-card.ability.trading.config.doj_hands)
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''function CardArea:emplace(card, location, stay_flipped)'''
position = 'after'
payload = '''   if card.ability and card.ability.trading and card.ability.trading.config.doj_hand_size and not card.debuff and (self == G.hand) then
        self.config.real_card_limit = (self.config.real_card_limit or self.config.card_limit) + card.ability.trading.config.doj_hand_size
        self.config.card_limit = math.max(0, self.config.real_card_limit)
    end
    if card.ability and card.ability.trading and card.ability.trading.config.doj_discards and (self == G.hand) then
        ease_discard(card.ability.trading.config.doj_discards)
    end
    if card.ability and card.ability.trading and card.ability.trading.config.doj_hands and (self == G.hand) then
        ease_hands_played(card.ability.trading.config.doj_hands)
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''limit = limit - 1 + (not card.debuff and card.edition and card.edition.card_limit or 0)'''
position = 'before'
payload = '''local old_limit = limit'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if limit < 0 then break end'''
position = 'before'
payload = '''if card.ability and card.ability.trading and card.ability.trading.config.doj_hand_size and not card.debuff then
    if limit + card.ability.trading.config.doj_hand_size < 0 then
        if old_limit == 0 then
            limit = -1
        else
            limit = 0
        end
    else
        limit = limit + card.ability.trading.config.doj_hand_size
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''for k, v in pairs(other.ability) do'''
position = 'before'
payload = '''new_card.doj_weeified = nil
new_card.doj_photoified = nil
new_card.doj_halfified = nil
new_card.doj_squarified = nil
local hand_size1 = not new_card.debuff and new_card.ability and new_card.ability.trading and new_card.ability.trading.config.doj_hand_size or 0
local discards1 = not new_card.debuff and new_card.ability and new_card.ability.trading and new_card.ability.trading.config.doj_discards or 0
local hands1 = not new_card.debuff and new_card.ability and new_card.ability.trading and new_card.ability.trading.config.doj_hands or 0'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''if not strip_edition then'''
position = 'before'
payload = '''local hand_size2 = not new_card.debuff and new_card.ability and new_card.ability.trading and new_card.ability.trading.config.doj_hand_size or 0
local discards2 = not new_card.debuff and new_card.ability and new_card.ability.trading and new_card.ability.trading.config.doj_discards or 0
local hands2 = not new_card.debuff and new_card.ability and new_card.ability.trading and new_card.ability.trading.config.doj_hands or 0
if new_card.area == G.hand then
    if hand_size1 ~= hand_size2 then
        local change = hand_size2 - hand_size1
        G.hand.config.real_card_limit = (G.hand.config.real_card_limit or G.hand.config.card_limit) + change
        G.hand.config.card_limit = math.max(0, G.hand.config.real_card_limit)
    end
    if discards1 ~= discards2 then
        local change = discards2 - discards1
        ease_discard(change)
    end
    if hands1 ~= hands2 then
        local change = hands2 - hands1
        ease_hands_played(change)
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if G.GAME.blind and G.boss_throw_hand and self.STATE == self.STATES.SELECTING_HAND then'''
position = 'before'
payload = '''G.GAME.doj_oopsness = G.GAME.doj_oopsness or 1
local oops_count = 1
if G.play and G.play.cards then
    for i = 1, #G.play.cards do
        local card = G.play.cards[i]
        if card and card.ability and card.ability.trading and (card.ability.trading.name == "Oops! All 6s") and not card.debuff then
            oops_count = oops_count * 2
        end
    end
    if oops_count ~= G.GAME.doj_oopsness then
        local change = oops_count / G.GAME.doj_oopsness
        G.GAME.doj_oopsness = oops_count
        G.GAME.probabilities.normal = G.GAME.probabilities.normal * change
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''local badges = {}'''
position = 'after'
payload = '''if self.ability and self.ability.trading and (self.ability.trading.name == "Misprint") then
    local r_mults = {}
    for i = self.ability.trading.config.min, self.ability.trading.config.max do
        r_mults[#r_mults+1] = tostring(i)
    end
    local loc_mult = ' '..(localize('k_mult'))..' '
    main_end = {
        {n=G.UIT.T, config={text = '  +',colour = G.C.MULT, scale = 0.32}},
        {n=G.UIT.O, config={object = DynaText({string = r_mults, colours = {G.C.RED},pop_in_rate = 9999999, silent = true, random_element = true, pop_delay = 0.5, scale = 0.32, min_cycle_time = 0})}},
        {n=G.UIT.O, config={object = DynaText({string = {
            {string = 'rand()', colour = G.C.JOKER_GREY},{string = "#@"..(G.deck and G.deck.cards[1] and G.deck.cards[#G.deck.cards].base.id or 11)..(G.deck and G.deck.cards[1] and G.deck.cards[#G.deck.cards].base.suit:sub(1,1) or 'D'), colour = G.C.RED},
            loc_mult, loc_mult, loc_mult, loc_mult, loc_mult, loc_mult, loc_mult, loc_mult, loc_mult, loc_mult, loc_mult, loc_mult, loc_mult},
        colours = {G.C.UI.TEXT_DARK},pop_in_rate = 9999999, silent = true, random_element = true, pop_delay = 0.2011, scale = 0.32, min_cycle_time = 0})}},
    }
end'''
match_indent = true